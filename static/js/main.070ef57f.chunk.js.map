{"version":3,"sources":["assets/profile-avatar.png","assets/florida_gators-logo.svg","assets/verizon-logo.svg","components/Header.js","components/Footer.js","components/About.js","components/Resume.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","data","name","occupation","description","city","address","networks","social","map","network","key","href","url","className","id","title","Footer","About","src","ProfileAvatar","alt","bio","Resume","education","school","degree","graduated","work","company","years","GatorLogo","VerizonLogo","App","useState","me","resumeData","main","resume","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.070ef57f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile-avatar.f7743d5e.png\";","module.exports = __webpack_public_path__ + \"static/media/florida_gators-logo.f2def22b.svg\";","module.exports = __webpack_public_path__ + \"static/media/verizon-logo.ea0c792c.svg\";","import React from 'react';\n\nconst Header = ({ data }) => {\n  const name = data.name;\n  const occupation = data.occupation;\n  const description = data.description;\n  const city = data.address.city;\n  const networks = data.social.map(network => {\n    return (\n      <li key={network.name}>\n        <a href={network.url}>\n          <i className={network.className}></i>\n        </a>\n      </li>\n    );\n  });\n\n  return (\n    <header id=\"home\">\n      <nav id=\"nav-wrap\">\n        <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">\n          Show navigation\n        </a>\n        <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">\n          Hide navigation\n        </a>\n\n        <ul id=\"nav\" className=\"nav\">\n          <li className=\"current\">\n            <a className=\"smoothscroll\" href=\"#home\">\n              Home\n            </a>\n          </li>\n          <li>\n            <a className=\"smoothscroll\" href=\"#about\">\n              About\n            </a>\n          </li>\n          <li>\n            <a className=\"smoothscroll\" href=\"#resume\">\n              Resume\n            </a>\n          </li>\n          {/* <li>\n            <a className=\"smoothscroll\" href=\"#portfolio\">\n              Portfolio\n            </a>\n          </li> */}\n        </ul>\n      </nav>\n\n      <div className=\"row banner\">\n        <div className=\"banner-text\">\n          <h1 className=\"responsive-headline\">I'm {name}.</h1>\n          <h3>\n            I'm a {city} based <span>{occupation}</span>. {description}.\n          </h3>\n          <hr />\n          <ul className=\"social\">{networks}</ul>\n        </div>\n      </div>\n\n      <p className=\"scrolldown\">\n        <a className=\"smoothscroll\" href=\"#about\">\n          <i className=\"icon-down-circle\"></i>\n        </a>\n      </p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = ({ data }) => {\n  const networks = data.social.map(network => {\n    return (\n      <li key={network.name}>\n        <a href={network.url}>\n          <i className={network.className}></i>\n        </a>\n      </li>\n    );\n  });\n\n  return (\n    <footer>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <ul className=\"social-links\">{networks}</ul>\n\n          <ul className=\"copyright\">\n            <li>&copy; Copyright 2019 Victor Hu</li>\n            <li>\n              Design by{' '}\n              <a title=\"Styleshout\" href=\"http://www.styleshout.com/\">\n                Styleshout\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div id=\"go-top\">\n          <a className=\"smoothscroll\" title=\"Back to Top\" href=\"#home\">\n            <i className=\"icon-up-open\"></i>\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport ProfileAvatar from '../assets/profile-avatar.png';\n\nconst About = ({ data }) => {\n  return (\n    <section id=\"about\">\n      <div className=\"row\">\n        <div className=\"three columns\">\n          <img\n            className=\"profile-pic\"\n            src={ProfileAvatar}\n            alt=\"victorh3 Profile Pic\"\n          />\n        </div>\n        <div className=\"nine columns main-col\">\n          <h2>About Me</h2>\n          <p>{data.bio}</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport GatorLogo from '../assets/florida_gators-logo.svg';\nimport VerizonLogo from '../assets/verizon-logo.svg';\n\nconst Resume = ({ data }) => {\n  const education = data.education.map(education => {\n    return (\n      <div key={education.school}>\n        <h3>{education.school}</h3>\n        <p className=\"info\">\n          {education.degree} <span>&bull;</span>\n          <em className=\"date\">{education.graduated}</em>\n        </p>\n        <p>{education.description}</p>\n      </div>\n    );\n  });\n  const work = data.work.map(work => {\n    return (\n      <div key={work.company}>\n        <h3>{work.company}</h3>\n        <p className=\"info\">\n          {work.title}\n          <span>&bull;</span> <em className=\"date\">{work.years}</em>\n        </p>\n        <p>{work.description}</p>\n      </div>\n    );\n  });\n\n  return (\n    <section id=\"resume\">\n      <div className=\"row education\">\n        <div className=\"twelve columns header-col\">\n          <h1>\n            <span>Education</span>\n          </h1>\n        </div>\n        <div className=\"three columns Resume-logo\">\n          <img\n            className=\"profile-pic\"\n            src={GatorLogo}\n            alt=\"Florida Gators logo\"\n          />\n        </div>\n        <div className=\"nine columns main-col\">\n          <div className=\"row item\">\n            <div className=\"twelve columns\">{education}</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row work\">\n        <div className=\"twelve columns header-col\">\n          <h1>\n            <span>Work</span>\n          </h1>\n        </div>\n        <div className=\"three columns Resume-logo\">\n          <img className=\"profile-pic\" src={VerizonLogo} alt=\"Verizon logo\" />\n        </div>\n        <div className=\"nine columns main-col\">{work}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default Resume;\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport About from './components/About';\nimport Resume from './components/Resume';\nimport './App.scss';\nimport me from './assets/resumeData';\n\nconst App = () => {\n  const [resumeData] = useState(me);\n\n  return (\n    <div className=\"App\">\n      <Header data={resumeData.main} />\n      <About data={resumeData.main} />\n      <Resume data={resumeData.resume} />\n      {/* <Portfolio data={resumeData.portfolio} /> */}\n      {/* <Contact data={resumeData.main} /> */}\n      <Footer data={resumeData.main} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}